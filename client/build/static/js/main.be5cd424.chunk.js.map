{"version":3,"sources":["components/appbar/searchAppBar.js","components/appbar/styles/Styles.js","components/words/word/Word.js","components/words/word/styles/Styles.js","components/words/Words.js","components/searchWords/SearchWords.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","display","marginLeft","spacing","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","width","breakpoints","up","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","fab","bottom","right","modal","maxWidth","marginTop","outline","flexDirection","margin","form","paper","SearchAppBar","props","classes","React","useState","open","setOpen","handleClose","body","Paper","className","onSubmit","event","preventDefault","submit","TextField","autoFocus","onChange","change","label","FormHelperText","Button","type","variant","AppBar","Toolbar","Typography","noWrap","InputBase","placeholder","input","inputProps","searchWord","Fab","onClick","Modal","onClose","aria-labelledby","aria-describedby","disableAutoFocus","overflow","otherDefinitions","lineHeight","cross","top","left","fontSize","Word","fontFamily","Tile","Height","Category","opacity","marginRight","Category2","data","word","results","lexicalEntries","lexicalCategory","text","entries","senses","definitions","map","result","i","key","objects","entery","sense","definition","examples","example","elevation","Words","style","this","words","_id","Component","SearchWords","toString","indexOf","searchedWord","App","componentDidMount","fetch","method","JSON","stringify","query","headers","then","res","json","setState","c","catch","err","alert","handleChange","target","value","handleSubmit","state","toLowerCase","trim","length","requestBody","addWord","Error","object","unshift","console","log","handleSearchWord","showList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.be5cd424.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Modal from '@material-ui/core/Modal';\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from '@material-ui/core/TextField';\nimport { FormHelperText } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Styles from './styles/Styles';\n\nconst useStyles = Styles;\n\nexport default function SearchAppBar(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const handleModel = () =>{\n    setOpen(true);\n  }\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleSubmit= (event) =>{\n    event.preventDefault();\n    props.submit();\n    handleClose();\n  }\n  const body = (\n    <Paper className={classes.paper}>\n        <form onSubmit={handleSubmit} className={classes.form}>\n          <TextField autoFocus={true} onChange={(event)=>props.change(event)} label=\"Word...\" />\n          <FormHelperText>Enter a new Word</FormHelperText>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">ADD</Button>\n        </form>\n    </Paper>\n  );\n\n  return (\n    <div className={classes.root}>\n      <AppBar>\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h5\" noWrap>\n            Vocab\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Searchâ€¦\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n              onChange={props.searchWord}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n\n\n      <Fab className={classes.fab} color=\"primary\" onClick={handleModel}><AddIcon/></Fab>\n\n\n\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        disableAutoFocus={true}\n        className={classes.modal}\n      >\n        {body}\n      </Modal>\n\n\n    </div>\n  );\n}\n","import { fade, makeStyles } from '@material-ui/core/styles';\n\nvar Styles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n      display: 'block',\n      marginLeft: theme.spacing(1.5),\n    },\n    search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginLeft: 0,\n      width: '60%',\n      [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(2),\n        width: '30%',\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n    },\n    fab: {\n      position: 'fixed',\n      bottom: theme.spacing(4),\n      right: theme.spacing(4),\n    },\n    modal:{\n      maxWidth: 350,\n      padding: theme.spacing(2,2),\n      marginTop: theme.spacing(20),\n      outline: \"none\",\n      display: 'flex',\n      flexDirection: 'column',\n      margin: 'auto'\n    },\n    form:{\n      margin: 'auto',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    paper:{\n      \"&:focus\": {\n        outline: \"none\"\n      },\n      padding: theme.spacing(3,3)\n    }\n  }));\n\n  export default Styles;","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\"\nimport Modal from '@material-ui/core/Modal';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Styles from \"./styles/Styles\";\nconst useStyles = Styles;\n\n\nfunction Word(props) {\n    const classes = useStyles();\n    \n    //state to store the the modal open and close boolean\n    const [open, setOpen] = React.useState(false);\n\n    //function to close modal\n    const handleOpen = () =>{\n        setOpen(true);\n    }\n\n    //function to open modal\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const data = props.word;\n    \n    //Defining the body of word details modal\n    const body = (\n        <>\n        <Paper className={classes.paper}>\n        <CloseIcon onClick={handleClose} className={classes.cross} />\n            <p className={classes.Word}>{data.word}</p>\n            <p><span className={classes.Category}>({data.results[0].lexicalEntries[0].lexicalCategory.text})</span> {data.results[0].lexicalEntries[0].entries[0].senses[0].definitions[0]}</p>\n            <br/>\n            <span className={classes.Category2}>Other definitions and their examples</span>\n            <hr/>\n            <div className={classes.otherDefinitions}>\n\n            {/* Travelling inside the data and printing details */}\n            {data.results.map((result,i)=>{\n                return <div key={i}>{result.lexicalEntries.map((objects,i)=>{\n                        return <div key={i}>{objects.entries.map((entery,i)=>{\n                            return <div key={i}>{entery.senses.map((sense,i)=>{\n                                return <div key={i}>\n                                    {sense.definitions.map((definition,i)=>{\n                                        return <li key={i}>{definition}\n                                            <ul type=\"circle\">\n                                                {sense.examples?\n                                                    sense.examples.map((example,i)=>{\n                                                        return <li key={i}>{example.text}</li>\n                                                    }):null\n                                                }\n                                            </ul>\n                                        </li>\n                                    })}\n                                    </div>\n                            })}</div>\n                        })}</div>\n                    })}</div>\n            })}\n            </div>\n        </Paper>\n        </>\n        );\n\n        //Return full page modal containg details of a specific word\n        return(\n        <>\n            <Paper onClick={handleOpen} className={classes.Tile} elevation={4}>  \n            <p className={classes.Word}>{data.word}</p>\n            <p><span className={classes.Category}>({data.results[0].lexicalEntries[0].lexicalCategory.text})</span> {data.results[0].lexicalEntries[0].entries[0].senses[0].definitions[0]}</p>\n            </Paper>\n            <Modal\n            open={open}\n            onClose={handleClose}\n            className={classes.modal}\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n            disableAutoFocus={true}\n            >\n                {body}\n            </Modal>\n        </>\n    )\n}\n\nexport default Word;","import { makeStyles } from '@material-ui/core/styles';\n\nvar Styles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    modal:{\n      width:'100%',\n      outline: \"none\",\n      display: 'flex',\n      flexDirection: 'column',\n      margin: 'auto',\n      height: '100%',\n      borderRadius: '10px'\n\n    },\n    paper:{\n      \"&:focus\": {\n        outline: \"none\"\n      },\n      padding: theme.spacing(3,3),\n      height: '100%',\n      overflow: 'auto'\n    },\n    otherDefinitions:{\n      lineHeight: 2\n    },\n    cross:{\n        top: '3%',\n        left:'calc(100% - 70px)',\n        fontSize: \"30px\",\n        position: 'fixed'\n    },\n    Word:{\n        fontSize: 26,\n        fontFamily: \"'Kumbh Sans', sans-serif\",\n        color: \"blue\"\n    },\n    Tile:{\n        padding: theme.spacing(2,3),\n        margin: theme.spacing(4,3),\n        Height: 24,\n        \"&:hover\":{\n            backgroundColor: \"#e6f2ff\"\n        },\n        lineHeight: 1.25\n    },\n    Category:{\n        opacity: 0.5,\n        fontSize: 16,\n        marginRight: theme.spacing(1)\n    },\n    Category2:{\n      opacity: 0.7,\n      fontSize: 18,\n      marginRight: theme.spacing(1)\n  }\n  }));\n\n  export default Styles;","import React from \"react\";\nimport Word from \"./word/Word\"\nclass Words extends React.Component{\n\n    render(){\n        //returns the word component stored\n        return(\n            <div style={{marginTop: \"80px\"}}>\n                {\n                    this.props.words.map((word)=>\n                        <Word key={word._id} word={word}/>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default Words;","import React from \"react\";\nimport Word from \"../words/word/Word\"\nclass SearchWords extends React.Component{\n    render(){\n        //returns the found words while searching\n        return(\n            <div style={{marginTop: \"80px\"}}>\n                {\n                    \n                    this.props.words.map((word)=>{\n                        var str = word.word.toString();\n                        return str.indexOf(this.props.searchedWord)!==-1\n                        ?\n                            <Word key={word._id} word={word}/>\n                        :\n                            null\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default SearchWords;","import React from 'react';\nimport AppBar from \"./components/appbar/searchAppBar\";\nimport Words from \"./components/words/Words\";\nimport SearchWords from \"./components/searchWords/SearchWords\"\n\n\nclass App extends React.Component{\n  //Constructor\n  constructor(){\n    super();\n\n    //State of component\n    this.state={\n      c:[],\n      showList: true,\n      word:\"\",\n      searchWord: \"\"\n    }\n  }\n\n  //invoked when component mount successfully\n  //It also make a graphQl API call to retrieve the data from backend\n  componentDidMount= ()=>{\n\n    //GraphQl API call structure\n    const requestBody={\n      query:`\n        query{\n          words{\n            _id\n            word\n            results{\n              lexicalEntries{\n                lexicalCategory{\n                  text\n                }\n                entries{\n                  senses{\n                    definitions\n                    examples{\n                      text\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `\n    }\n\n    //Fetching data\n    //all possible errors are handeled\n    fetch(\"/graphql\",{\n      method: \"POST\",\n      body: JSON.stringify(requestBody),\n      headers:{\n        'Content-Type': 'application/json',\n      }\n    })\n      .then((res)=>res.json())\n\n      //setting state using fetced data\n      .then((data)=>{\n        this.setState({\n          c:data.data.words\n        })\n      }).catch((err)=>{\n        alert(err);\n      })\n  }\n\n  //invoked when a change occurs in search bar input field\n  handleChange = event =>{\n    this.setState({\n      word: event.target.value\n    })\n  }\n\n  //invoked when user tries to add a word in dictionary\n  //it will send a GraphQl mutation request to add that word in database\n  handleSubmit = () => {\n    //Word enterd by user\n    var word = this.state.word.toLowerCase();\n    if(word.trim().length === 0){\n      return;\n    }\n\n    //Request structure for mutation call\n    const requestBody={\n      query:`\n        mutation{\n          addWord(word:\"${word}\"){\n            _id\n            word\n            results{\n              lexicalEntries{\n                lexicalCategory{\n                  text\n                }\n                entries{\n                  senses{\n                    definitions\n                    examples{\n                      text\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `\n    }\n\n    //sending word to backend side\n    //all possible errors are handeled\n    fetch(\"/graphql\",{\n      method: \"POST\",\n      body: JSON.stringify(requestBody),\n      headers:{\n        'Content-Type': 'application/json',\n      }\n    }).then((res)=>res.json())\n    .then((c)=>{\n        if(!c.data.addWord){\n          throw new Error(\"Word not found!\")\n        }\n        var object = c.data.addWord;\n        var objects=[...this.state.c];\n        objects.unshift(object);\n        this.setState({\n          c: objects\n        })\n    }).catch((err)=>{\n      console.log(err);\n      alert(err);\n    });\n  }\n\n  //Search handler\n  handleSearchWord = (event) =>{\n    this.setState({\n      searchWord: event.target.value.toLowerCase(),\n      showList: false\n    });\n  }\n\n  //will return list of word present in database \n  //along with other components\n  render(){\n    return(\n      <div>\n        <AppBar submit={this.handleSubmit} searchWord={this.handleSearchWord} change={this.handleChange}/>\n        {this.state.showList?\n          <Words words={this.state.c} />\n          :\n          <SearchWords words={this.state.c} searchedWord={this.state.searchWord} />\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}